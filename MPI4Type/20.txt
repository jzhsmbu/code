#include "pt4.h"
#include "mpi.h"

void Solve()
{
    Task("MPI4Type20");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (rank != 0)
    {
        int N;
        pt >> N;
        int P;
        pt >> P;
        int* B = new int[3 * N - 2];
        for (int i = 0; i < 3 * N - 2; i++)
        {
            pt >> B[i];
        }

        MPI_Send(B, 3 * N - 2, MPI_INT, 0, P, MPI_COMM_WORLD);
    }
    else
    {
        MPI_Status s;
        int N;
        pt >> N;
        int count = N * ((size - 1) / 3) * (3 * N);
        int* A = new int[count];
        for (int i = 0; i < count; i++)
        {
            A[i] = 0;
        }

        MPI_Datatype t;

        int* blocklens = new int[2*N-1];
        for (int i = 0; i < 2 * N - 1; i++)
        {
            if (i == 2*N - 2)
                blocklens[i] = N;
            else
                blocklens[i] = 1;
        }

        int* dis = new int[2*N-1];
        for (int i = 0; i < 2 * N - 1; i++)
        {
            if (i == 0)
                dis[i] = 0;
            else
            {
                if (i % 2 == 1)
                    dis[i] = dis[i - 1] + N-1;
                else
                    dis[i] = dis[i - 1] + 3 * N -(N-1);
            }
        }

        for (int i = 0; i < 2*N-1; i++)
        {
            Show(dis[i]);
        }

        MPI_Type_indexed(2 * N - 1, blocklens, dis, MPI_INT, &t);
        MPI_Type_commit(&t);

        for (int i = 1; i < size; i++)
        {
            MPI_Probe(i, MPI_ANY_TAG, MPI_COMM_WORLD, &s);           
            MPI_Recv(&A[s.MPI_TAG], 1, t, i, s.MPI_TAG, MPI_COMM_WORLD, &s);
        }
        for (int i = 0; i < count; i++)
        {
            pt << A[i];
        }

    }
}
