// File: "LinqXml5"
using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml.Linq;

namespace PT4Tasks
{
    public class MyTask : PT
    {
        // When solving tasks of the LinqXml group, the following
        // additional methods defined in the taskbook are available:
        // (*) Show() and Show(cmt) (extension methods) - debug output
        //       of a sequence, cmt - string comment;
        // (*) Show(e => r) and Show(cmt, e => r) (extension methods) -
        //       debug output of r values, obtained from elements e
        //       of a sequence, cmt - string comment.

        public static void Solve()
        {
            Task("LinqXml5");

        //    var a = File.ReadLines(GetString());
        //    int countline = 1;
        //    int countword = 1;

        //    XDocument d = new XDocument(new XDeclaration(null, "us-ascii", null));
        //    XElement root = new XElement("root");

        //    foreach (var it in a)
        //    {
        //        XElement line = new XElement("line");
        //        line.SetAttributeValue("num", countline);
        //        root.Add(line);

        //        string[] words = it.Split(' ');
        //        foreach (var w in words)
        //        {
        //            XElement word = new XElement("word");
        //            word.SetAttributeValue("num", countword);
        //            word.SetValue(w);
        //            line.Add(word);
        //            countword++;
        //        }

        //        countline++;
        //        countword = 1;
        //    }

        //    d.Add(root);
        //    d.Save(GetString());
        

            int countline = 1;
            int countword = 1;

            var a = File.ReadLines(GetString())
                .Select(e =>
                {
                    string[] s = e.Split(' ');
                    var b = s;
                    return b;
                });

            XDocument res = new XDocument(
                new XDeclaration(null, "us-ascii", null),
                new XElement("root", a.Select(e => new XElement("line", e.Select(ee => new XElement("word",ee))))));
            foreach(var line in res.Root.Elements())
            {
                line.SetAttributeValue("num", countline++);
                foreach(var word in line.Elements())
                {
                    word.SetAttributeValue("num", countword++);
                }
                countword = 1;
            }

            res.Save(GetString());
        }
    }
}
