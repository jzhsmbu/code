#include "pt4.h"
#include "mpi.h"

#include <cmath>

int k;              // number of processes
int r;              // rank of the current process

int m, p, q;        // sizes of the given matrices
int na, nb;         // sizes of the matrix bands

int *a_, *b_, *c_;  // arrays to store matrices in the master process
int *a, *b, *c;     // arrays to store matrix bands in each process

void Matr1GatherData()
{
    int* C = new int[m * q];
    int buf_num = na * q;
    MPI_Gather(c, buf_num, MPI_INT, C, buf_num, MPI_INT, 0, MPI_COMM_WORLD);

    if(r == 0)
    {
        for (int i = 0; i < m * q; i++)
        {
            Show(C[i]);
            pt << C[i];
        }
    }
}

void Solve()
{
    Task("MPI9Matr6");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    k = size;
    r = rank;

    if (rank == 0)
    {
        pt >> m >> na >> q;
    }
    else
    {
        pt >> na >> q;
    }

    c = new int[na * q];

    for (int i = 0; i < na * q; i++)
    {
        pt >> c[i];
        Show(c[i]);
    }

    // 调用函数
    Matr1GatherData();

}
