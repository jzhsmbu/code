// File: "OOP1Creat6"
using PT4;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PT4Tasks
{
    public class MyTask : PT
    {
        public abstract class BaseClass
        {
            int data;
            public void IncData(int increment)
            {
                data += increment;
            }
            public int GetData()
            {
                return data;
            }
        }

        public class Singleton : BaseClass
        {
            static Singleton uniqueInstance;
            Singleton() {}
            public static void Reset()
            {
                uniqueInstance = null;
            }
            // Complete the implementation of the class
            public static int InstanceCount()
            {
                if (uniqueInstance == null)
                    return 0;
                else
                    return 1;
            }
            public static Singleton Instance()
            {
                if (uniqueInstance == null)
                    uniqueInstance = new Singleton();
                return uniqueInstance;
            }

        }

        public class Doubleton : BaseClass
        {
            static Doubleton[] instances = new Doubleton[2];
            Doubleton() {}
            public static void Reset()
            {
                instances[0] = instances[1] = null;
            }
            // Complete the implementation of the class

            public static Doubleton Instance1()
            {
                if (instances[0] == null)
                    instances[0] = new Doubleton();
                return instances[0];
            }
            public static Doubleton Instance2()
            {
                if (instances[1] == null)
                    instances[1] = new Doubleton();
                return instances[1];
                
            }
            public static int InstanceCount()
            {
                int ncount = 0;
                for (int i = 0; i < 2; i++)
                {
                    if (instances[i] != null)
                        ncount++;
                }
                return ncount;
            }
        }

        public class Tenton : BaseClass
        {
            static Tenton[] instances = new Tenton[10];
            Tenton() {}
            public static void Reset()
            {
                for (int i = 0; i < instances.Length; i++)
                    instances[i] = null;
            }
            // Complete the implementation of the class
            public static Tenton Instancen(int n)
            {
                if (instances[n] == null)
                    instances[n] = new Tenton();
                return instances[n];
            }
            public static int InstanceCount()
            {
                int ncount = 0;
                for(int i=0;i<10;i++)
                {
                    if(instances[i]!=null)
                    {
                        ncount++;
                    }
                }
                return ncount;
            }
        }

        public static void Solve()
        {
            Task("OOP1Creat6");
            int N;
            N = GetInt();
            var b = new BaseClass[N]; 

            for (int i = 0; i < N; i++)
            {
                string s;
                s = GetString();
                switch(s[0])
                {
                    case 'S':
                        b[i] = Singleton.Instance();
                        break;
                    case 'D':
                        if (s[1] == '1')
                            b[i] = Doubleton.Instance1();          
                        else
                            b[i] = Doubleton.Instance2();
                        break;
                    case 'T':
                        b[i] = Tenton.Instancen(s[1] - '0');
                        break;
                }
            }

            Put(Singleton.InstanceCount());
            Put(Doubleton.InstanceCount());
            Put(Tenton.InstanceCount());


            int K;
            K = GetInt();

            for (int j = 0; j < K; j++)
            {
                int n, number;
                n = GetInt();
                number = GetInt();
                b[n].IncData(number);
            }
            for(int i=0;i<N;i++)
            {
                Put(b[i].GetData());

            }

            Singleton.Reset();
            Doubleton.Reset();
            Tenton.Reset();

        }
    }
}
