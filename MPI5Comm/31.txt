#include "pt4.h"
#include "mpi.h"

void Solve()
{
    Task("MPI5Comm31");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    
    MPI_Comm new_comm;

    int* sources = new int[size];
    int* degrees = new int[size];
    int* destinations = new int[4 * (size / 3)];

    for (int i = 0; i < size; i++)
    {
        sources[i] = i;
    }

    for (int i = 0; i < size; i++)
    {
        if (i % 3 == 0)
            degrees[i] = 3;
        else if (i % 3 == 1)
            degrees[i] = 1;
        else
            degrees[i] = 0;
    }

    for (int i = 0; i < 4 * (size / 3); i++)
    {
        if (i % 4 == 0)
        {
            destinations[i] = (3 * i) / 4 + 1;
        }
        else if (i % 4 == 1)
        {
            destinations[i] = (3 * (i-1)) / 4 + 2;
        }
        else if(i % 4 == 2)
        {
            if (i == 4 * (size / 3) - 2)
            {
                destinations[i] = 0;
            }
            else
            {
                destinations[i] = 3 * ((i-2) / 4 + 1);
            }
        }
        else
        {
            destinations[i] = (3 * (i - 3)) / 4 + 2;
        }
    }


    if (rank == 0)
    {
        for (int i = 0; i < 4 * (size / 3); i++)
            Show(destinations[i]);
        ShowLine();

    }

    if (rank == 0)
    {
        MPI_Dist_graph_create(MPI_COMM_WORLD, size, sources, degrees, destinations, MPI_UNWEIGHTED, MPI_INFO_NULL, 0, &new_comm);

        int indegree,outdegree,weighted;
        MPI_Dist_graph_neighbors_count(new_comm, &indegree, &outdegree, &weighted);

        int* sourc = new int[indegree];
        int* dest = new int[outdegree];
        MPI_Dist_graph_neighbors(new_comm, indegree, sourc, &weighted, outdegree, dest, &weighted);

        int A;
        int sum = 0;
        pt >> A;
        sum = sum + A;

        for (int i = 0; i < outdegree; i++)
        {
            MPI_Send(&A, 1, MPI_INT, dest[i], 0, new_comm);
        }
        for (int i = 0; i < indegree; i++)
        {
            MPI_Recv(&A, 1, MPI_INT, sourc[i], 0, new_comm, MPI_STATUS_IGNORE);
            sum  = sum + A;
        }
        pt << sum;
    }

    else
    {
        MPI_Dist_graph_create(MPI_COMM_WORLD, 0, 0, 0, 0, MPI_UNWEIGHTED, MPI_INFO_NULL, 0, &new_comm);


        int indegree, outdegree, weighted;
        MPI_Dist_graph_neighbors_count(new_comm, &indegree, &outdegree, &weighted);

        int* sourc = new int[indegree];
        int* dest = new int[outdegree];

        MPI_Dist_graph_neighbors(new_comm, indegree, sourc, &weighted, outdegree, dest, &weighted);

        int A;
        int sum = 0;
        pt >> A;
        sum = sum + A;


        for (int i = 0; i < outdegree; i++)
        {
            MPI_Send(&A, 1, MPI_INT, dest[i], 0, new_comm);
        }
        for (int i = 0; i < indegree; i++)
        {
            MPI_Recv(&A, 1, MPI_INT, sourc[i], 0, new_comm, MPI_STATUS_IGNORE);
            sum = sum + A;
        }
        pt << sum;
    }
}

