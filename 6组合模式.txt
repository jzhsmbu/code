#include "pt4.h"
using namespace std;

class Device
{
public:
    virtual void Add(Device* d) {}
    virtual string GetName() = 0;
    virtual int GetTotalPrice() = 0;
};

// Implement the SimpleDevice
//   and CompoundDevice descendant classes

class SimpleDevice : public Device
{
	string name;
	int price;
public:
	SimpleDevice(string name,int price);
	virtual string GetName();
	virtual int GetTotalPrice();
	 	
};

SimpleDevice::SimpleDevice(string name,int price)
{
	this->name=name;
	this->price=price;
}

string SimpleDevice::GetName()
{
	return this->name;
}

int SimpleDevice::GetTotalPrice()
{	
	return this->price;	
}

class CompoundDevice : public Device
{
	Device* d;
	string name;
	int price;
	vector<Device*> V_device;
public:
	CompoundDevice(string name,int price);
	void Add(Device* d);
	virtual string GetName();
	virtual int GetTotalPrice();
		
};

CompoundDevice::CompoundDevice(string name,int price)
{
	this->name=name;
	this->price=price;
}

void CompoundDevice::Add(Device* d)
{
	V_device.push_back(d);
}

string CompoundDevice::GetName()
{
	return this->name;
}

int CompoundDevice::GetTotalPrice()
{
    if(V_device.size()==0)
    {
    	return this->price;
	}
	else
	{
		int ncount=this->price;
		for(auto e:V_device)
		{
			ncount+=e->GetTotalPrice();
		}
		return ncount;
	}
	
}


void Solve()
{
    Task("OOP2Struc6");
    int N;
    pt >> N;
    Device** AD = new Device*[N];
    string name;
    int price;
    
    for(int i=0;i<N;i++)
    {
    	pt >> name >> price;
    	if(name[0]>='a' && name[0]<='z')
    	{
    		AD[i]=new SimpleDevice(name,price);
		}
		else
		{
			AD[i]=new CompoundDevice(name,price);
		}
	}
	
	for(int i=0;i<N;i++)
	{
		int K;
		pt >> K;
		if (K != -1)
		{
			AD[K]->Add(AD[i]);
		}            
	}
	
	for(int i = 0; i < N; i++)
	{
        pt << AD[i]->GetName()
		<< AD[i]->GetTotalPrice();
    }
    
}