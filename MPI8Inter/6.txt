#include "pt4.h"
#include "mpi.h"

void Solve()
{
    Task("MPI8Inter6");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    double X;
    pt >> X;

    MPI_Comm comm, new_comm1, new_comm2;
    MPI_Comm peer;
    MPI_Comm_dup(MPI_COMM_WORLD, &peer);

    MPI_Group g, new_group1, new_group2;
    MPI_Comm_group(MPI_COMM_WORLD, &g);

    int new_ranks[1][3];
    for (int i = 0; i < 3; i++)
    {
        if (i == 0)
            new_ranks[0][i] = 0;
        else if (i == 1)
            new_ranks[0][i] = size / 2 - 1;
        else
            new_ranks[0][i] = 1;
    }

    MPI_Group_range_incl(g, 1, new_ranks, &new_group1);

    for (int i = 0; i < 3; i++)
    {
        if (i == 0)
            new_ranks[0][i] = size / 2;
        else if (i == 1)
            new_ranks[0][i] = size - 1;
        else
            new_ranks[0][i] = 1;
    }

    MPI_Group_range_incl(g, 1, new_ranks, &new_group2);

    if (rank < size / 2)
    {
        MPI_Comm_create(MPI_COMM_WORLD, new_group1, &comm);
        int local_rank;
        MPI_Comm_rank(comm, &local_rank);
        pt << local_rank;

        MPI_Intercomm_create(comm, 0, peer, size / 2, 100, &new_comm1);
        MPI_Comm_split(new_comm1, rank % 2 == 0 ? 0 : 1, rank, &new_comm2);

        MPI_Comm_rank(new_comm2, &local_rank);
        pt << local_rank;

        MPI_Send(&X, 1, MPI_DOUBLE, local_rank, 0, new_comm2);
        double A[1];
        MPI_Recv(A, 1, MPI_DOUBLE, local_rank, 0, new_comm2, MPI_STATUSES_IGNORE);
        Show(A[0]);
        pt << A[0];
    }
    else
    {
        MPI_Comm_create(MPI_COMM_WORLD, new_group2, &comm);
        int local_rank;
        MPI_Comm_rank(comm, &local_rank);
        pt << local_rank;

        MPI_Intercomm_create(comm, 0, peer, 0, 100, &new_comm1);
        MPI_Comm_split(new_comm1, rank % 2 == 0 ? 0 : 1, size - rank, &new_comm2);

        MPI_Comm_rank(new_comm2, &local_rank);
        pt << local_rank;

        MPI_Send(&X, 1, MPI_DOUBLE, local_rank, 0, new_comm2);
        double A[1];
        MPI_Recv(A, 1, MPI_DOUBLE, local_rank, 0, new_comm2, MPI_STATUSES_IGNORE);
        Show(A[0]);
        pt << A[0];
    }

}
