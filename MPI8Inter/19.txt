#include "pt4.h"
#include "mpi.h"

void Solve()
{
    Task("MPI8Inter19");
    int flag;
    MPI_Initialized(&flag);
    if (flag == 0)
        return;
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    int double_size = 2 * size;
    MPI_Comm new_comm1, new_comm2;
    int* A = new int[double_size];

    if (rank == 0)
    {
        for (int i = 0; i < double_size; i++)
        {
            pt >> A[i];
        }
        for (int i = 0; i < double_size; i++)
        {
            Show(A[i]);
        }
    }

    MPI_Comm_get_parent(&new_comm1);

    int high = new_comm1 == MPI_COMM_NULL ? 0 : 1;

    if (new_comm1 == MPI_COMM_NULL)
    {
        char c[10] = "ptprj.exe";
        MPI_Comm_spawn(c, NULL, size, MPI_INFO_NULL, 0, MPI_COMM_WORLD, &new_comm1, MPI_ERRCODES_IGNORE);
    }
    else
        ;

    MPI_Intercomm_merge(new_comm1, high, &new_comm2);
    int local_rank;
    MPI_Comm_rank(new_comm2, &local_rank);
    Show(local_rank);

    int B[1];
    MPI_Scatter(A, 1, MPI_INT, B, 1, MPI_INT, 0, new_comm2);
    
    if (local_rank >= size)
        ;
    else
    {
        Show(B[0]);
        pt << B[0];
    }

    int C[1];
    MPI_Reduce(B, C, 1, MPI_INT, MPI_SUM, 1, new_comm2);

    if (rank == 1)
    {
        Show(C[0]);
        pt << C[0];
    }
}
