#include "pt4.h"
using namespace std;

class Function
{
public:
    virtual string GetName() = 0;
    virtual int GetValue(int x) = 0;
};

// Implement the FX, FDouble, FTriple, FSquare
//   and FCube descendant classes

class FX : public Function 
{
    string* f;
public:
    virtual string GetName();
    virtual int GetValue(int x);
};

string FX::GetName() 
{
    return "X";
}

int FX::GetValue(int x) 
{
    return x;
}

class FDouble : public Function 
{
    Function* mfunc;
public:
    FDouble(Function* mfunc);
    virtual string GetName();
    virtual int GetValue(int x);
};

FDouble::FDouble(Function* mfunc) 
{
    this->mfunc = mfunc;
}

string FDouble::GetName() 
{
    string s1="2*(";
    string s2=")";
	return s1 + mfunc->GetName() + s2;
}

int FDouble::GetValue(int x) 
{
    return 2 * mfunc->GetValue(x);
}

class FTriple : public Function 
{
    Function* mfunc;
public:
    FTriple(Function* mfunc);
    virtual string GetName();
    virtual int GetValue(int x);
};

FTriple::FTriple(Function* mfunc) 
{
    this->mfunc = mfunc;
}

string FTriple::GetName() 
{
    string s1="3*(";
    string s2=")";
	return s1 + mfunc->GetName() + s2;
}

int FTriple::GetValue(int x) 
{
    return 3 * mfunc->GetValue(x);
}

class FSquare : public Function 
{
    Function* mfunc;
public:
    FSquare(Function* mfunc);
    virtual string GetName();
    virtual int GetValue(int x);
};

FSquare::FSquare(Function* mfunc) 
{
    this->mfunc = mfunc;
}

string FSquare::GetName() 
{
    string s1="(";
    string s2=")";
    string s3="^2";
	return s1 + mfunc->GetName() + s2 + s3;
}

int FSquare::GetValue(int x) 
{
    return mfunc->GetValue(x) * mfunc->GetValue(x);
}

class FCube : public Function 
{
    Function* mfunc;
public:
    FCube(Function* mfunc);
    virtual string GetName();
    virtual int GetValue(int x);
};

FCube::FCube(Function* mfunc) 
{
    this->mfunc = mfunc;
}

string FCube::GetName() 
{
    string s1="(";
    string s2=")";
    string s3="^3";
	return s1 + mfunc->GetName() + s2 + s3;
}

int FCube::GetValue(int x) 
{
    return mfunc->GetValue(x) * mfunc->GetValue(x) * mfunc->GetValue(x);
}

void Solve()
{
    Task("OOP2Struc8");
    int N;
    pt >> N;
    Function** elemf = new Function * [N];
    string s; 
    
    for(int i=0;i<N;i++)
    {
    	pt >> s;
    	elemf[i] = new FX;
    	
        for (int j = 0; j < s.length(); j++)
		{
            switch (s[j]) 
			{
            case 'D':
                elemf[i] = new FDouble(elemf[i]);
                break;
            case 'T':
                elemf[i] = new FTriple(elemf[i]);
                break;
            case 'S':
                elemf[i] = new FSquare(elemf[i]);
                break;
            case 'C':
                elemf[i] = new FCube(elemf[i]);
                break;
            }
        }	
	}
    
    int x1,x2;
    pt >> x1 >> x2;
    for(int i=0;i<N;i++)
    {
    	pt << elemf[i]->GetName() << elemf[i]->GetValue(x1) << elemf[i]->GetValue(x2); 	
	}
    
}